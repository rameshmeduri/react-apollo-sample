{"version":3,"sources":["components/Job/Job.component.js","components/Jobs/Jobs.component.js","components/Jobs/Jobs.container.js","utils/data.js","index.js"],"names":["Job","props","href","job","applyUrl","className","title","company","name","cities","length","map","city","join","getCitiesList","LoadJobsButton","type","onClick","LoadingJobs","role","NumberOfJobs","jobs","Jobs","showLoadJobsButton","isLoadingJobs","getJobs","key","id","JobsContainer","useState","setJobs","setIsLoadingJobs","then","data","catch","finally","JOBS_QUERY","gql","client","cache","InMemoryCache","link","HttpLink","uri","ApolloClient","createApolloClient","ReactDOM","render","StrictMode","Promise","resolve","reject","query","document","getElementById"],"mappings":"qOA8BeA,MApBf,SAAaC,GACX,OACE,uBACEC,KAAMD,EAAME,IAAIC,SAChBC,UAAU,0CAEV,4BAAKJ,EAAME,IAAIG,OACf,6BACE,4CADF,IAC6BL,EAAME,IAAII,QAAQC,MAE9CP,EAAME,IAAIM,OAAOC,OAAS,GACzB,6BACE,gCAAwBT,EAAME,IAAIM,OAnB5BC,OAAS,EAAI,SAAW,OAmB9B,MAhBV,SAAuBD,GACrB,OAAOA,EAAOE,KAAI,SAACC,GAAD,OAAUA,EAAKJ,QAAMK,KAAK,MAgBnCC,CAAcb,EAAME,IAAIM,WCpBnC,SAASM,EAAed,GACtB,OACE,4BACEe,KAAK,SACLX,UAAU,0BACVY,QAAShB,EAAMgB,SAHjB,qBAUJ,SAASC,IACP,OACE,yBAAKb,UAAU,8BAA8Bc,KAAK,UAChD,0BAAMd,UAAU,WAAhB,eAKN,SAASe,EAAanB,GACpB,OAA0B,IAAtBA,EAAMoB,KAAKX,OACN,KAGF,0BAAML,UAAU,uBAAuBJ,EAAMoB,KAAKX,QA6B5CY,MA1Bf,SAAcrB,GACZ,IAAMsB,GAAsBtB,EAAMoB,KAAKX,SAAWT,EAAMuB,cAExD,OACE,yBAAKnB,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,QAAd,gBACe,kBAACe,EAAD,CAAcC,KAAMpB,EAAMoB,QAGxCE,GAAsB,kBAACR,EAAD,CAAgBE,QAAShB,EAAMwB,UAErDxB,EAAMuB,eAAiB,kBAACN,EAAD,MAExB,yBAAKb,UAAU,cACZJ,EAAMoB,KAAKV,KAAI,SAAAR,GAAG,OACjB,kBAAC,EAAD,CAAKuB,IAAKvB,EAAIwB,GAAIxB,IAAKA,YCpBtByB,MAzBf,SAAuB3B,GAAQ,IAAD,EACJ4B,mBAAS,IADL,mBACrBR,EADqB,KACfS,EADe,OAEcD,oBAAS,GAFvB,mBAErBL,EAFqB,KAENO,EAFM,KAsB5B,OAAO,kBAAC,EAAD,CAAMV,KAAMA,EAAMI,QAlBzB,WACEM,GAAiB,GAEjB9B,EACGwB,UACAO,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACHA,GACFH,EAAQG,EAAKZ,SAGhBa,OAAM,eAGNC,SAAQ,WACPJ,GAAiB,OAIoBP,cAAeA,K,iRCpB5D,IAEMY,EAAaC,IAAH,KAuChB,IAAMC,EAvBN,WACE,IAAMC,EAAQ,IAAIC,IACZC,EAAO,IAAIC,IAAS,CACxBC,IArBgB,8BAwBlB,OAAO,IAAIC,IAAa,CACtBL,QACAE,SAeWI,GCzCfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAevB,QD4BnB,WACE,OAAO,IAAIwB,SAAQ,SAACC,EAASC,GAC3Bb,EACGc,MAAM,CACLA,MAAOhB,IAERJ,KAAKkB,GACLhB,MAAMiB,UCjCXE,SAASC,eAAe,W","file":"static/js/main.16e76a9e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction getCitiesLabel(cities) {\n  return cities.length > 1 ? \"Cities\" : \"City\";\n}\n\nfunction getCitiesList(cities) {\n  return cities.map((city) => city.name).join(\", \");\n}\n\nfunction Job(props) {\n  return (\n    <a\n      href={props.job.applyUrl}\n      className=\"list-group-item list-group-item-action\"\n    >\n      <h3>{props.job.title}</h3>\n      <div>\n        <strong>Company:</strong> {props.job.company.name}\n      </div>\n      {props.job.cities.length > 0 && (\n        <div>\n          <strong>{getCitiesLabel(props.job.cities)}: </strong>\n          {getCitiesList(props.job.cities)}\n        </div>\n      )}\n    </a>\n  );\n}\n\nexport default Job;\n","import React from \"react\";\nimport Job from \"../Job/Job.component\";\n\nfunction LoadJobsButton(props) {\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-outline-primary\"\n      onClick={props.onClick}\n    >\n      Load GraphQL jobs\n    </button>\n  );\n}\n\nfunction LoadingJobs() {\n  return (\n    <div className=\"spinner-border text-primary\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  );\n}\n\nfunction NumberOfJobs(props) {\n  if (props.jobs.length === 0) {\n    return null;\n  }\n\n  return <span className=\"badge badge-primary\">{props.jobs.length}</span>;\n}\n\nfunction Jobs(props) {\n  const showLoadJobsButton = !props.jobs.length && !props.isLoadingJobs;\n\n  return (\n    <div className=\"container mt-5 mb-5\">\n      <div className=\"row\">\n        <div className=\"col-lg-8 offset-lg-2\">\n          <h1 className=\"mb-4\">\n            GraphQL Jobs <NumberOfJobs jobs={props.jobs} />\n          </h1>\n\n          {showLoadJobsButton && <LoadJobsButton onClick={props.getJobs} />}\n\n          {props.isLoadingJobs && <LoadingJobs />}\n\n          <div className=\"list-group\">\n            {props.jobs.map(job => (\n              <Job key={job.id} job={job} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Jobs;\n","import React, { useState } from \"react\";\nimport Jobs from \"./Jobs.component\";\n\nfunction JobsContainer(props) {\n  const [jobs, setJobs] = useState([]);\n  const [isLoadingJobs, setIsLoadingJobs] = useState(false);\n\n  function getJobs() {\n    setIsLoadingJobs(true);\n\n    props\n      .getJobs()\n      .then(({ data }) => {\n        if (data) {\n          setJobs(data.jobs);\n        }\n      })\n      .catch(() => {\n        // TODO: handle errors\n      })\n      .finally(() => {\n        setIsLoadingJobs(false);\n      });\n  }\n\n  return <Jobs jobs={jobs} getJobs={getJobs} isLoadingJobs={isLoadingJobs} />;\n}\n\nexport default JobsContainer;\n","import gql from \"graphql-tag\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\n\nconst GRAPHQL_URI = \"https://api.graphql.jobs/\";\n\nconst JOBS_QUERY = gql`\n  query {\n    jobs {\n      id\n      title\n      company {\n        name\n      }\n      cities {\n        name\n      }\n      applyUrl\n    }\n  }\n`;\n\nfunction createApolloClient() {\n  const cache = new InMemoryCache();\n  const link = new HttpLink({\n    uri: GRAPHQL_URI\n  });\n\n  return new ApolloClient({\n    cache,\n    link\n  });\n}\n\nfunction getJobs() {\n  return new Promise((resolve, reject) => {\n    client\n      .query({\n        query: JOBS_QUERY\n      })\n      .then(resolve)\n      .catch(reject);\n  });\n}\n\nconst client = createApolloClient();\n\nexport { getJobs };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport JobsContainer from \"./components/Jobs/Jobs.container\";\nimport { getJobs } from \"./utils/data\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <JobsContainer getJobs={getJobs} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}